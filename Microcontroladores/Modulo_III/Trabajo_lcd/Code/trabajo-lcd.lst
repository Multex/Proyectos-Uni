CCS PCM C Compiler, Version 5.015, 5967               16-Jun-24 18:22

               Filename:   D:\Universidad\Microcontroladores\Modulo_III\Trabajo_lcd\Code\trabajo-lcd.lst

               ROM used:   963 words (12%)
                           Largest free fragment is 2048
               RAM used:   11 (3%) at main() level
                           27 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   303
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 20,10
0005:  DATA 45,27
0006:  DATA C3,22
0007:  DATA 4E,22
0008:  DATA 49,22
0009:  DATA 4F,10
000A:  DATA C4,22
000B:  DATA 20,10
000C:  DATA 00,00
000D:  DATA 20,10
000E:  DATA 20,10
000F:  DATA CD,27
0010:  DATA D4,27
0011:  DATA 52,10
0012:  DATA C4,21
0013:  DATA 20,10
0014:  DATA 20,10
0015:  DATA 00,01
0016:  DATA 0C,00
0017:  DATA 0C,00
0018:  DATA CD,37
0019:  DATA F4,37
001A:  DATA 72,1D
001B:  DATA A0,27
001C:  DATA 6E,00
001D:  DATA D4,34
001E:  DATA E5,36
001F:  DATA F0,37
0020:  DATA 3A,10
0021:  DATA 25,18
0022:  DATA B2,3A
0023:  DATA 00,00
0024:  DATA CD,37
0025:  DATA F4,37
0026:  DATA 72,1D
0027:  DATA A0,27
0028:  DATA 66,33
0029:  DATA 00,01
002A:  DATA D4,34
002B:  DATA E5,36
002C:  DATA F0,37
002D:  DATA 3A,10
002E:  DATA 25,18
002F:  DATA B2,3A
0030:  DATA 00,00
*
0182:  MOVF   0B,W
0183:  MOVWF  27
0184:  BCF    0B.7
0185:  BSF    03.5
0186:  BSF    03.6
0187:  BSF    0C.7
0188:  BSF    0C.0
0189:  NOP
018A:  NOP
018B:  BCF    03.5
018C:  BCF    03.6
018D:  BTFSC  27.7
018E:  BSF    0B.7
018F:  BSF    03.6
0190:  MOVF   0C,W
0191:  ANDLW  7F
0192:  BTFSC  03.2
0193:  GOTO   1D6
0194:  BCF    03.6
0195:  MOVWF  27
0196:  BSF    03.6
0197:  MOVF   0D,W
0198:  BCF    03.6
0199:  MOVWF  28
019A:  BSF    03.6
019B:  MOVF   0F,W
019C:  BCF    03.6
019D:  MOVWF  29
019E:  MOVF   27,W
019F:  MOVWF  2B
01A0:  CALL   156
01A1:  MOVF   28,W
01A2:  BSF    03.6
01A3:  MOVWF  0D
01A4:  BCF    03.6
01A5:  MOVF   29,W
01A6:  BSF    03.6
01A7:  MOVWF  0F
01A8:  BCF    03.6
01A9:  MOVF   0B,W
01AA:  MOVWF  2A
01AB:  BCF    0B.7
01AC:  BSF    03.5
01AD:  BSF    03.6
01AE:  BSF    0C.7
01AF:  BSF    0C.0
01B0:  NOP
01B1:  NOP
01B2:  BCF    03.5
01B3:  BCF    03.6
01B4:  BTFSC  2A.7
01B5:  BSF    0B.7
01B6:  BSF    03.6
01B7:  RLF    0C,W
01B8:  RLF    0E,W
01B9:  ANDLW  7F
01BA:  BTFSC  03.2
01BB:  GOTO   1D6
01BC:  BCF    03.6
01BD:  MOVWF  27
01BE:  BSF    03.6
01BF:  MOVF   0D,W
01C0:  BCF    03.6
01C1:  MOVWF  28
01C2:  BSF    03.6
01C3:  MOVF   0F,W
01C4:  BCF    03.6
01C5:  MOVWF  29
01C6:  MOVF   27,W
01C7:  MOVWF  2B
01C8:  CALL   156
01C9:  MOVF   28,W
01CA:  BSF    03.6
01CB:  MOVWF  0D
01CC:  BCF    03.6
01CD:  MOVF   29,W
01CE:  BSF    03.6
01CF:  MOVWF  0F
01D0:  INCF   0D,F
01D1:  BTFSC  03.2
01D2:  INCF   0F,F
01D3:  BCF    03.6
01D4:  GOTO   182
01D5:  BSF    03.6
01D6:  BCF    03.6
01D7:  RETURN
*
022E:  CLRF   77
022F:  CLRF   78
0230:  MOVF   27,W
0231:  BCF    03.0
0232:  BTFSC  28.0
0233:  ADDWF  77,F
0234:  RRF    77,F
0235:  RRF    78,F
0236:  BTFSC  28.1
0237:  ADDWF  77,F
0238:  RRF    77,F
0239:  RRF    78,F
023A:  BTFSC  28.2
023B:  ADDWF  77,F
023C:  RRF    77,F
023D:  RRF    78,F
023E:  BTFSC  28.3
023F:  ADDWF  77,F
0240:  RRF    77,F
0241:  RRF    78,F
0242:  BTFSC  28.4
0243:  ADDWF  77,F
0244:  RRF    77,F
0245:  RRF    78,F
0246:  BTFSC  28.5
0247:  ADDWF  77,F
0248:  RRF    77,F
0249:  RRF    78,F
024A:  BTFSC  28.6
024B:  ADDWF  77,F
024C:  RRF    77,F
024D:  RRF    78,F
024E:  BTFSC  28.7
024F:  ADDWF  77,F
0250:  RRF    77,F
0251:  RRF    78,F
0252:  BCF    0A.3
0253:  BCF    0A.4
0254:  GOTO   351 (RETURN)
*
0262:  MOVF   0B,W
0263:  MOVWF  28
0264:  BCF    0B.7
0265:  BSF    03.5
0266:  BSF    03.6
0267:  BSF    0C.7
0268:  BSF    0C.0
0269:  NOP
026A:  NOP
026B:  BCF    03.5
026C:  BCF    03.6
026D:  BTFSC  28.7
026E:  BSF    0B.7
026F:  BTFSC  03.0
0270:  GOTO   299
0271:  BSF    03.6
0272:  MOVF   0C,W
0273:  ANDLW  7F
0274:  BCF    03.6
0275:  MOVWF  28
0276:  BSF    03.6
0277:  MOVF   0D,W
0278:  BCF    03.6
0279:  MOVWF  29
027A:  BSF    03.6
027B:  MOVF   0F,W
027C:  BCF    03.6
027D:  MOVWF  2A
027E:  MOVF   28,W
027F:  MOVWF  2B
0280:  CALL   156
0281:  MOVF   29,W
0282:  BSF    03.6
0283:  MOVWF  0D
0284:  BCF    03.6
0285:  MOVF   2A,W
0286:  BSF    03.6
0287:  MOVWF  0F
0288:  BCF    03.6
0289:  MOVF   0B,W
028A:  MOVWF  2B
028B:  BCF    0B.7
028C:  BSF    03.5
028D:  BSF    03.6
028E:  BSF    0C.7
028F:  BSF    0C.0
0290:  NOP
0291:  NOP
0292:  BCF    03.5
0293:  BCF    03.6
0294:  BTFSC  2B.7
0295:  BSF    0B.7
0296:  DECFSZ 27,F
0297:  GOTO   299
0298:  GOTO   2B8
0299:  BSF    03.6
029A:  RLF    0C,W
029B:  RLF    0E,W
029C:  ANDLW  7F
029D:  BCF    03.6
029E:  MOVWF  28
029F:  BSF    03.6
02A0:  MOVF   0D,W
02A1:  BCF    03.6
02A2:  MOVWF  29
02A3:  BSF    03.6
02A4:  MOVF   0F,W
02A5:  BCF    03.6
02A6:  MOVWF  2A
02A7:  MOVF   28,W
02A8:  MOVWF  2B
02A9:  CALL   156
02AA:  MOVF   29,W
02AB:  BSF    03.6
02AC:  MOVWF  0D
02AD:  BCF    03.6
02AE:  MOVF   2A,W
02AF:  BSF    03.6
02B0:  MOVWF  0F
02B1:  INCF   0D,F
02B2:  BTFSC  03.2
02B3:  INCF   0F,F
02B4:  BCF    03.0
02B5:  BCF    03.6
02B6:  DECFSZ 27,F
02B7:  GOTO   262
02B8:  RETURN
02B9:  MOVF   2A,W
02BA:  CLRF   78
02BB:  SUBWF  29,W
02BC:  BTFSC  03.0
02BD:  GOTO   2C1
02BE:  MOVF   29,W
02BF:  MOVWF  77
02C0:  GOTO   2CD
02C1:  CLRF   77
02C2:  MOVLW  08
02C3:  MOVWF  2B
02C4:  RLF    29,F
02C5:  RLF    77,F
02C6:  MOVF   2A,W
02C7:  SUBWF  77,W
02C8:  BTFSC  03.0
02C9:  MOVWF  77
02CA:  RLF    78,F
02CB:  DECFSZ 2B,F
02CC:  GOTO   2C4
02CD:  RETURN
02CE:  MOVF   78,W
02CF:  MOVF   27,W
02D0:  MOVWF  29
02D1:  MOVLW  64
02D2:  MOVWF  2A
02D3:  CALL   2B9
02D4:  MOVF   77,W
02D5:  MOVWF  27
02D6:  MOVF   78,W
02D7:  MOVLW  30
02D8:  BTFSS  03.2
02D9:  GOTO   2E1
02DA:  BTFSS  28.1
02DB:  GOTO   2E8
02DC:  BTFSC  28.3
02DD:  GOTO   2E8
02DE:  BTFSC  28.4
02DF:  MOVLW  20
02E0:  GOTO   2E4
02E1:  BCF    28.3
02E2:  BCF    28.4
02E3:  BSF    28.0
02E4:  ADDWF  78,F
02E5:  MOVF   78,W
02E6:  MOVWF  2B
02E7:  CALL   156
02E8:  MOVF   27,W
02E9:  MOVWF  29
02EA:  MOVLW  0A
02EB:  MOVWF  2A
02EC:  CALL   2B9
02ED:  MOVF   77,W
02EE:  MOVWF  27
02EF:  MOVF   78,W
02F0:  MOVLW  30
02F1:  BTFSS  03.2
02F2:  GOTO   2F9
02F3:  BTFSC  28.3
02F4:  GOTO   2FD
02F5:  BTFSS  28.0
02F6:  GOTO   2FD
02F7:  BTFSC  28.4
02F8:  MOVLW  20
02F9:  ADDWF  78,F
02FA:  MOVF   78,W
02FB:  MOVWF  2B
02FC:  CALL   156
02FD:  MOVLW  30
02FE:  ADDWF  27,F
02FF:  MOVF   27,W
0300:  MOVWF  2B
0301:  CALL   156
0302:  RETURN
....................  
.................... #list 
....................  
.................... #fuses XT 
.................... #use delay(clock=4M) 
*
0031:  MOVLW  2C
0032:  MOVWF  04
0033:  BCF    03.7
0034:  MOVF   00,W
0035:  BTFSC  03.2
0036:  GOTO   045
0037:  MOVLW  01
0038:  MOVWF  78
0039:  CLRF   77
003A:  DECFSZ 77,F
003B:  GOTO   03A
003C:  DECFSZ 78,F
003D:  GOTO   039
003E:  MOVLW  4A
003F:  MOVWF  77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  GOTO   043
0043:  DECFSZ 00,F
0044:  GOTO   037
0045:  RETURN
.................... //! #include <stdbool.h> | This is not necessary 
.................... /*******************/ 
.................... #byte trisa = 0x85 
.................... #byte porta = 0x05 
.................... #byte portb = 0x06 
.................... #byte trisb = 0x86 
.................... /*******************/ 
.................... #bit C1 = portb.5 
.................... #bit C2 = portb.6 
.................... #bit C3 = portb.7 
.................... #bit F1 = portb.0 
.................... #bit F2 = portb.1 
.................... #bit F3 = portb.2 
.................... #bit F4 = portb.3 
.................... /*******************/ 
.................... #define LCD_ENABLE_PIN  PIN_D3 
.................... #define LCD_RS_PIN      PIN_D1 
.................... #define LCD_RW_PIN      PIN_D2 
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5 
.................... #define LCD_DATA6       PIN_D6 
.................... #define LCD_DATA7       PIN_D7 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00AA:  BSF    08.4
....................    output_float(LCD_DATA5); 
00AB:  BSF    08.5
....................    output_float(LCD_DATA6); 
00AC:  BSF    08.6
....................    output_float(LCD_DATA7); 
00AD:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AE:  BCF    03.5
00AF:  BSF    08.2
00B0:  BSF    03.5
00B1:  BCF    08.2
....................    delay_cycles(1); 
00B2:  NOP
....................    lcd_output_enable(1); 
00B3:  BCF    03.5
00B4:  BSF    08.3
00B5:  BSF    03.5
00B6:  BCF    08.3
....................    delay_cycles(1); 
00B7:  NOP
....................    high = lcd_read_nibble(); 
00B8:  BCF    03.5
00B9:  CALL   071
00BA:  MOVF   78,W
00BB:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
00BC:  BCF    08.3
00BD:  BSF    03.5
00BE:  BCF    08.3
....................    delay_cycles(1); 
00BF:  NOP
....................    lcd_output_enable(1); 
00C0:  BCF    03.5
00C1:  BSF    08.3
00C2:  BSF    03.5
00C3:  BCF    08.3
....................    delay_us(1); 
00C4:  NOP
....................    low = lcd_read_nibble(); 
00C5:  BCF    03.5
00C6:  CALL   071
00C7:  MOVF   78,W
00C8:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
00C9:  BCF    08.3
00CA:  BSF    03.5
00CB:  BCF    08.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CC:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00CD:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00CE:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00CF:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00D0:  BCF    03.5
00D1:  SWAPF  33,W
00D2:  MOVWF  77
00D3:  MOVLW  F0
00D4:  ANDWF  77,F
00D5:  MOVF   77,W
00D6:  IORWF  32,W
00D7:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0071:  CLRF   34
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0072:  BSF    03.5
0073:  BSF    08.4
0074:  MOVLW  00
0075:  BCF    03.5
0076:  BTFSC  08.4
0077:  MOVLW  01
0078:  IORWF  34,F
....................    n |= input(LCD_DATA5) << 1; 
0079:  BSF    03.5
007A:  BSF    08.5
007B:  MOVLW  00
007C:  BCF    03.5
007D:  BTFSC  08.5
007E:  MOVLW  01
007F:  MOVWF  77
0080:  BCF    03.0
0081:  RLF    77,F
0082:  MOVF   77,W
0083:  IORWF  34,F
....................    n |= input(LCD_DATA6) << 2; 
0084:  BSF    03.5
0085:  BSF    08.6
0086:  MOVLW  00
0087:  BCF    03.5
0088:  BTFSC  08.6
0089:  MOVLW  01
008A:  MOVWF  77
008B:  RLF    77,F
008C:  RLF    77,F
008D:  MOVLW  FC
008E:  ANDWF  77,F
008F:  MOVF   77,W
0090:  IORWF  34,F
....................    n |= input(LCD_DATA7) << 3; 
0091:  BSF    03.5
0092:  BSF    08.7
0093:  MOVLW  00
0094:  BCF    03.5
0095:  BTFSC  08.7
0096:  MOVLW  01
0097:  MOVWF  77
0098:  RLF    77,F
0099:  RLF    77,F
009A:  RLF    77,F
009B:  MOVLW  F8
009C:  ANDWF  77,F
009D:  MOVF   77,W
009E:  IORWF  34,F
....................     
....................    return(n); 
009F:  MOVF   34,W
00A0:  MOVWF  78
....................   #else 
00A1:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0046:  BTFSC  33.0
0047:  GOTO   04A
0048:  BCF    08.4
0049:  GOTO   04B
004A:  BSF    08.4
004B:  BSF    03.5
004C:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
004D:  BCF    03.5
004E:  BTFSC  33.1
004F:  GOTO   052
0050:  BCF    08.5
0051:  GOTO   053
0052:  BSF    08.5
0053:  BSF    03.5
0054:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0055:  BCF    03.5
0056:  BTFSC  33.2
0057:  GOTO   05A
0058:  BCF    08.6
0059:  GOTO   05B
005A:  BSF    08.6
005B:  BSF    03.5
005C:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
005D:  BCF    03.5
005E:  BTFSC  33.3
005F:  GOTO   062
0060:  BCF    08.7
0061:  GOTO   063
0062:  BSF    08.7
0063:  BSF    03.5
0064:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(1); 
0066:  BCF    03.5
0067:  BSF    08.3
0068:  BSF    03.5
0069:  BCF    08.3
....................    delay_us(2); 
006A:  GOTO   06B
....................    lcd_output_enable(0); 
006B:  BCF    03.5
006C:  BCF    08.3
006D:  BSF    03.5
006E:  BCF    08.3
006F:  BCF    03.5
0070:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A2:  BSF    03.5
00A3:  BCF    08.3
....................    lcd_rs_tris(); 
00A4:  BCF    08.1
....................    lcd_rw_tris(); 
00A5:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A6:  BCF    03.5
00A7:  BCF    08.1
00A8:  BSF    03.5
00A9:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D8:  MOVF   78,W
00D9:  MOVWF  32
00DA:  BTFSS  32.7
00DB:  GOTO   0DE
00DC:  BSF    03.5
00DD:  GOTO   0AA
....................    lcd_output_rs(address); 
00DE:  MOVF   30,F
00DF:  BTFSS  03.2
00E0:  GOTO   0E3
00E1:  BCF    08.1
00E2:  GOTO   0E4
00E3:  BSF    08.1
00E4:  BSF    03.5
00E5:  BCF    08.1
....................    delay_cycles(1); 
00E6:  NOP
....................    lcd_output_rw(0); 
00E7:  BCF    03.5
00E8:  BCF    08.2
00E9:  BSF    03.5
00EA:  BCF    08.2
....................    delay_cycles(1); 
00EB:  NOP
....................    lcd_output_enable(0); 
00EC:  BCF    03.5
00ED:  BCF    08.3
00EE:  BSF    03.5
00EF:  BCF    08.3
....................    lcd_send_nibble(n >> 4); 
00F0:  BCF    03.5
00F1:  SWAPF  31,W
00F2:  MOVWF  32
00F3:  MOVLW  0F
00F4:  ANDWF  32,F
00F5:  MOVF   32,W
00F6:  MOVWF  33
00F7:  CALL   046
....................    lcd_send_nibble(n & 0xf); 
00F8:  MOVF   31,W
00F9:  ANDLW  0F
00FA:  MOVWF  32
00FB:  MOVWF  33
00FC:  CALL   046
00FD:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00FE:  MOVLW  28
00FF:  MOVWF  28
0100:  MOVLW  0C
0101:  MOVWF  29
0102:  MOVLW  01
0103:  MOVWF  2A
0104:  MOVLW  06
0105:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0106:  BCF    08.3
0107:  BSF    03.5
0108:  BCF    08.3
....................    lcd_output_rs(0); 
0109:  BCF    03.5
010A:  BCF    08.1
010B:  BSF    03.5
010C:  BCF    08.1
....................    lcd_output_rw(0); 
010D:  BCF    03.5
010E:  BCF    08.2
010F:  BSF    03.5
0110:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0111:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0112:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0113:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0114:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0115:  BCF    08.3
....................    lcd_rs_tris(); 
0116:  BCF    08.1
....................    lcd_rw_tris(); 
0117:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0118:  MOVLW  0F
0119:  BCF    03.5
011A:  MOVWF  2C
011B:  CALL   031
....................    for(i=1;i<=3;++i) 
011C:  MOVLW  01
011D:  MOVWF  27
011E:  MOVF   27,W
011F:  SUBLW  03
0120:  BTFSS  03.0
0121:  GOTO   12A
....................    { 
....................        lcd_send_nibble(3); 
0122:  MOVLW  03
0123:  MOVWF  33
0124:  CALL   046
....................        delay_ms(5); 
0125:  MOVLW  05
0126:  MOVWF  2C
0127:  CALL   031
0128:  INCF   27,F
0129:  GOTO   11E
....................    } 
....................     
....................    lcd_send_nibble(2); 
012A:  MOVLW  02
012B:  MOVWF  33
012C:  CALL   046
....................    delay_ms(5); 
012D:  MOVLW  05
012E:  MOVWF  2C
012F:  CALL   031
....................    for(i=0;i<=3;++i) 
0130:  CLRF   27
0131:  MOVF   27,W
0132:  SUBLW  03
0133:  BTFSS  03.0
0134:  GOTO   141
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0135:  MOVLW  28
0136:  ADDWF  27,W
0137:  MOVWF  04
0138:  BCF    03.7
0139:  MOVF   00,W
013A:  MOVWF  2C
013B:  CLRF   30
013C:  MOVF   2C,W
013D:  MOVWF  31
013E:  CALL   0A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013F:  INCF   27,F
0140:  GOTO   131
0141:  BCF    0A.3
0142:  BCF    0A.4
0143:  GOTO   318 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0144:  DECFSZ 2D,W
0145:  GOTO   147
0146:  GOTO   14A
....................       address=LCD_LINE_TWO; 
0147:  MOVLW  40
0148:  MOVWF  2E
0149:  GOTO   14B
....................    else 
....................       address=0; 
014A:  CLRF   2E
....................       
....................    address+=x-1; 
014B:  MOVLW  01
014C:  SUBWF  2C,W
014D:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
014E:  MOVF   2E,W
014F:  IORLW  80
0150:  MOVWF  2F
0151:  CLRF   30
0152:  MOVF   2F,W
0153:  MOVWF  31
0154:  CALL   0A2
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0155:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0156:  MOVF   2B,W
0157:  XORLW  07
0158:  BTFSC  03.2
0159:  GOTO   164
015A:  XORLW  0B
015B:  BTFSC  03.2
015C:  GOTO   169
015D:  XORLW  06
015E:  BTFSC  03.2
015F:  GOTO   171
0160:  XORLW  02
0161:  BTFSC  03.2
0162:  GOTO   177
0163:  GOTO   17C
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0164:  MOVLW  01
0165:  MOVWF  2C
0166:  MOVWF  2D
0167:  CALL   144
0168:  GOTO   181
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0169:  CLRF   30
016A:  MOVLW  01
016B:  MOVWF  31
016C:  CALL   0A2
....................                      delay_ms(2); 
016D:  MOVLW  02
016E:  MOVWF  2C
016F:  CALL   031
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0170:  GOTO   181
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0171:  MOVLW  01
0172:  MOVWF  2C
0173:  MOVLW  02
0174:  MOVWF  2D
0175:  CALL   144
0176:  GOTO   181
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0177:  CLRF   30
0178:  MOVLW  10
0179:  MOVWF  31
017A:  CALL   0A2
017B:  GOTO   181
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
017C:  MOVLW  01
017D:  MOVWF  30
017E:  MOVF   2B,W
017F:  MOVWF  31
0180:  CALL   0A2
....................      #endif 
....................    } 
0181:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... /*******************/ 
.................... int key = 12; //* Keypad (only keys) - Max value: 12 
.................... int digit; //* Numeric value 
.................... int ONES = 0; // Unidades 
.................... int TENS = 0; // Decimas 
.................... int digitFix; //* Fix digits - Para tomar 2 digitos 
.................... //// bool motorStatus = false; //? false = OFF / true = ON 
.................... //// byte const motorSteps[5] = {0b00110000, 0b01100000, 0b11000000, 0b10010000, }; 
.................... /*******************/ 
.................... void keyDetection(){ //* Used to detect the key pressed 
....................     C1 = 1; 
*
01D8:  BSF    06.5
....................     if (F1 == 1){key = 1; digit = 1; while(F1 == 1){};}  
01D9:  BTFSS  06.0
01DA:  GOTO   1E0
01DB:  MOVLW  01
01DC:  MOVWF  20
01DD:  MOVWF  21
01DE:  BTFSC  06.0
01DF:  GOTO   1DE
....................     if (F2 == 1){key = 4; digit = 4; while(F2 == 1){};} 
01E0:  BTFSS  06.1
01E1:  GOTO   1E7
01E2:  MOVLW  04
01E3:  MOVWF  20
01E4:  MOVWF  21
01E5:  BTFSC  06.1
01E6:  GOTO   1E5
....................     if (F3 == 1){key = 7; digit = 7; while(F3 == 1){};} 
01E7:  BTFSS  06.2
01E8:  GOTO   1EE
01E9:  MOVLW  07
01EA:  MOVWF  20
01EB:  MOVWF  21
01EC:  BTFSC  06.2
01ED:  GOTO   1EC
....................     if (F4 == 1){key = 10;} // "*" - Clear/Stop 
01EE:  BTFSS  06.3
01EF:  GOTO   1F2
01F0:  MOVLW  0A
01F1:  MOVWF  20
....................     C1 = 0; 
01F2:  BCF    06.5
....................  
....................     C2 = 1; 
01F3:  BSF    06.6
....................     if (F1 == 1){key = 2; digit = 2; while(F1 == 1){};} 
01F4:  BTFSS  06.0
01F5:  GOTO   1FB
01F6:  MOVLW  02
01F7:  MOVWF  20
01F8:  MOVWF  21
01F9:  BTFSC  06.0
01FA:  GOTO   1F9
....................     if (F2 == 1){key = 5; digit = 5; while(F2 == 1){};} 
01FB:  BTFSS  06.1
01FC:  GOTO   202
01FD:  MOVLW  05
01FE:  MOVWF  20
01FF:  MOVWF  21
0200:  BTFSC  06.1
0201:  GOTO   200
....................     if (F3 == 1){key = 8; digit = 8; while(F3 == 1){};} 
0202:  BTFSS  06.2
0203:  GOTO   209
0204:  MOVLW  08
0205:  MOVWF  20
0206:  MOVWF  21
0207:  BTFSC  06.2
0208:  GOTO   207
....................     if (F4 == 1){key = 0; digit = 0; while(F4 == 1){};} 
0209:  BTFSS  06.3
020A:  GOTO   20F
020B:  CLRF   20
020C:  CLRF   21
020D:  BTFSC  06.3
020E:  GOTO   20D
....................     C2 = 0; 
020F:  BCF    06.6
....................  
....................     C3 = 1; 
0210:  BSF    06.7
....................     if (F1 == 1){key = 3; digit = 3; while(F1 == 1){};} 
0211:  BTFSS  06.0
0212:  GOTO   218
0213:  MOVLW  03
0214:  MOVWF  20
0215:  MOVWF  21
0216:  BTFSC  06.0
0217:  GOTO   216
....................     if (F2 == 1){key = 6; digit = 6; while(F2 == 1){};} 
0218:  BTFSS  06.1
0219:  GOTO   21F
021A:  MOVLW  06
021B:  MOVWF  20
021C:  MOVWF  21
021D:  BTFSC  06.1
021E:  GOTO   21D
....................     if (F3 == 1){key = 9; digit = 9; while(F3 == 1){};} 
021F:  BTFSS  06.2
0220:  GOTO   226
0221:  MOVLW  09
0222:  MOVWF  20
0223:  MOVWF  21
0224:  BTFSC  06.2
0225:  GOTO   224
....................     if (F4 == 1){key = 11; while(F4 == 1){};} // "#" - Start 
0226:  BTFSS  06.3
0227:  GOTO   22C
0228:  MOVLW  0B
0229:  MOVWF  20
022A:  BTFSC  06.3
022B:  GOTO   22A
....................     C3 = 0; 
022C:  BCF    06.7
022D:  RETURN
.................... } 
....................  
.................... //! void motorControl(){ //* Used to control the motor | This is the old function 
.................... //!    for(int A=0; A < 5; A++){ // Detectar el número de pasos 
.................... //!        portc = motorSteps[A]; 
.................... //!        delay_ms(80); 
.................... //!    } 
.................... //!} 
....................  
.................... void motorControl(){ //* Used to control the motor 
....................     porta = 0b00000010; 
*
0255:  MOVLW  02
0256:  MOVWF  05
....................     delay_ms(80); 
0257:  MOVLW  50
0258:  MOVWF  2C
0259:  CALL   031
....................     porta = 0b00000001; 
025A:  MOVLW  01
025B:  MOVWF  05
....................     delay_ms(80); 
025C:  MOVLW  50
025D:  MOVWF  2C
025E:  CALL   031
025F:  BCF    0A.3
0260:  BCF    0A.4
0261:  GOTO   359 (RETURN)
.................... } 
....................  
.................... void main(){ 
*
0303:  MOVF   03,W
0304:  ANDLW  1F
0305:  MOVWF  03
0306:  MOVLW  0C
0307:  MOVWF  20
0308:  CLRF   22
0309:  CLRF   23
030A:  BSF    03.5
030B:  BSF    1F.0
030C:  BSF    1F.1
030D:  BSF    1F.2
030E:  BCF    1F.3
030F:  MOVLW  07
0310:  MOVWF  1C
0311:  BCF    03.7
....................     trisa = 0b00000000; 
0312:  CLRF   05
....................     trisb = 0b00001111; 
0313:  MOVLW  0F
0314:  MOVWF  06
....................     porta = 0x00; 
0315:  BCF    03.5
0316:  CLRF   05
....................  
....................     lcd_init(); // Initialize the LCD 
0317:  GOTO   0FE
....................  
....................     // Welcome message 
....................     lcd_gotoxy(1, 1); 
0318:  MOVLW  01
0319:  MOVWF  2C
031A:  MOVWF  2D
031B:  CALL   144
....................     lcd_putc("  ENCENDIDO DE  "); 
031C:  MOVLW  04
031D:  BSF    03.6
031E:  MOVWF  0D
031F:  MOVLW  00
0320:  MOVWF  0F
0321:  BCF    03.6
0322:  CALL   182
....................     lcd_gotoxy(1, 2); 
0323:  MOVLW  01
0324:  MOVWF  2C
0325:  MOVLW  02
0326:  MOVWF  2D
0327:  CALL   144
....................     lcd_putc("    MOTOR DC    "); 
0328:  MOVLW  0D
0329:  BSF    03.6
032A:  MOVWF  0D
032B:  MOVLW  00
032C:  MOVWF  0F
032D:  BCF    03.6
032E:  CALL   182
....................     delay_ms(3000); // 3 sec 
032F:  MOVLW  0C
0330:  MOVWF  27
0331:  MOVLW  FA
0332:  MOVWF  2C
0333:  CALL   031
0334:  DECFSZ 27,F
0335:  GOTO   331
....................     lcd_putc("\f"); // After 3 sec, clear the LCD 
0336:  MOVLW  16
0337:  BSF    03.6
0338:  MOVWF  0D
0339:  MOVLW  00
033A:  MOVWF  0F
033B:  BCF    03.6
033C:  CALL   182
....................  
....................     while(true){ 
....................         keyDetection(); // Function to detect the key pressed 
033D:  CALL   1D8
....................          
....................         if(key < 10){ //* If the key pressed is a number 
033E:  MOVF   20,W
033F:  SUBLW  09
0340:  BTFSS  03.0
0341:  GOTO   354
....................             TENS = ONES; 
0342:  MOVF   22,W
0343:  MOVWF  23
....................             delay_ms(100); 
0344:  MOVLW  64
0345:  MOVWF  2C
0346:  CALL   031
....................             ONES = digit; 
0347:  MOVF   21,W
0348:  MOVWF  22
....................             delay_ms(100); 
0349:  MOVLW  64
034A:  MOVWF  2C
034B:  CALL   031
....................  
....................             digitFix = (TENS * 10) + ONES; 
034C:  MOVF   23,W
034D:  MOVWF  27
034E:  MOVLW  0A
034F:  MOVWF  28
0350:  GOTO   22E
0351:  MOVF   22,W
0352:  ADDWF  78,W
0353:  MOVWF  24
....................         }  
....................         if(key == 11){ //* 11 = "#" -> Start 
0354:  MOVF   20,W
0355:  SUBLW  0B
0356:  BTFSS  03.2
0357:  GOTO   399
....................             motorControl(); // Function to start the motor 
0358:  GOTO   255
....................             lcd_putc("\f"); // Clear the LCD 
0359:  MOVLW  17
035A:  BSF    03.6
035B:  MOVWF  0D
035C:  MOVLW  00
035D:  MOVWF  0F
035E:  BCF    03.6
035F:  CALL   182
....................  
....................             int stableDigit = digitFix; //* To keep the value of digitFix 
0360:  MOVF   24,W
0361:  MOVWF  25
....................              
....................             for(int i=0; i < stableDigit; i++){ // For loop to count down 
0362:  CLRF   26
0363:  MOVF   25,W
0364:  SUBWF  26,W
0365:  BTFSC  03.0
0366:  GOTO   395
....................                 keyDetection(); // Calling it again to detect the key pressed 
0367:  CALL   1D8
....................                  
....................                 if(key == 10){break;} //* 10 = "*" -> Stop 
0368:  MOVF   20,W
0369:  SUBLW  0A
036A:  BTFSC  03.2
036B:  GOTO   395
....................  
....................                 lcd_gotoxy(1, 1); 
036C:  MOVLW  01
036D:  MOVWF  2C
036E:  MOVWF  2D
036F:  CALL   144
....................                 printf(lcd_putc, "Motor: On"); 
0370:  MOVLW  18
0371:  BSF    03.6
0372:  MOVWF  0D
0373:  MOVLW  00
0374:  MOVWF  0F
0375:  BCF    03.6
0376:  CALL   182
....................                 lcd_gotoxy(1, 2); 
0377:  MOVLW  01
0378:  MOVWF  2C
0379:  MOVLW  02
037A:  MOVWF  2D
037B:  CALL   144
....................                 printf(lcd_putc, "Tiempo: %02u", digitFix); 
037C:  MOVLW  1D
037D:  BSF    03.6
037E:  MOVWF  0D
037F:  MOVLW  00
0380:  MOVWF  0F
0381:  BCF    03.0
0382:  MOVLW  08
0383:  BCF    03.6
0384:  MOVWF  27
0385:  CALL   262
0386:  MOVF   24,W
0387:  MOVWF  27
0388:  MOVLW  01
0389:  MOVWF  28
038A:  CALL   2CE
....................  
....................                 digitFix--; 
038B:  DECF   24,F
....................                 delay_ms(920); // 920(For this case) + 80(From motorControl) = 1 sec 
038C:  MOVLW  04
038D:  MOVWF  27
038E:  MOVLW  E6
038F:  MOVWF  2C
0390:  CALL   031
0391:  DECFSZ 27,F
0392:  GOTO   38E
0393:  INCF   26,F
0394:  GOTO   363
....................             } 
....................  
....................             //* Reset the values after the loop 
....................             ONES = 0; 
0395:  CLRF   22
....................             TENS = 0; 
0396:  CLRF   23
....................             digitFix = 0; 
0397:  CLRF   24
....................  
....................             porta = 0; // Reset the motor 
0398:  CLRF   05
....................         } 
....................         if(key == 10){ //* 10 = "*" -> Clear 
0399:  MOVF   20,W
039A:  SUBLW  0A
039B:  BTFSS  03.2
039C:  GOTO   3A0
....................             TENS = 0; 
039D:  CLRF   23
....................             ONES = 0; 
039E:  CLRF   22
....................             digitFix = 0; 
039F:  CLRF   24
....................         } 
....................  
....................         // Default message 
....................         lcd_gotoxy(1, 1); 
03A0:  MOVLW  01
03A1:  MOVWF  2C
03A2:  MOVWF  2D
03A3:  CALL   144
....................         lcd_putc("Motor: Off"); 
03A4:  MOVLW  24
03A5:  BSF    03.6
03A6:  MOVWF  0D
03A7:  MOVLW  00
03A8:  MOVWF  0F
03A9:  BCF    03.6
03AA:  CALL   182
....................         lcd_gotoxy(1, 2); 
03AB:  MOVLW  01
03AC:  MOVWF  2C
03AD:  MOVLW  02
03AE:  MOVWF  2D
03AF:  CALL   144
....................         printf(lcd_putc, "Tiempo: %02u", digitFix); 
03B0:  MOVLW  2A
03B1:  BSF    03.6
03B2:  MOVWF  0D
03B3:  MOVLW  00
03B4:  MOVWF  0F
03B5:  BCF    03.0
03B6:  MOVLW  08
03B7:  BCF    03.6
03B8:  MOVWF  27
03B9:  CALL   262
03BA:  MOVF   24,W
03BB:  MOVWF  27
03BC:  MOVLW  01
03BD:  MOVWF  28
03BE:  CALL   2CE
....................  
....................         key = 12; // Reset the key 
03BF:  MOVLW  0C
03C0:  MOVWF  20
03C1:  GOTO   33D
....................     } 
.................... } 
03C2:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
